import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import { NFTCard } from '../NFTCard';

const mockNFT = {
  id: '1',
  title: 'Ambient Dreams',
  artist: 'AI Composer',
  price: '10.5',
  currency: 'FLOW',
  image: 'https://example.com/image.jpg',
  audioUrl: 'https://example.com/audio.mp3',
  genre: 'Ambient',
  duration: 180,
  description: 'A peaceful ambient track generated by AI',
  createdAt: '2024-01-15T10:00:00Z',
  owner: '0x1234567890abcdef',
  isForSale: true
};

const renderWithRouter = (component) => {
  return render(
    <BrowserRouter>
      {component}
    </BrowserRouter>
  );
};

describe('NFTCard', () => {
  it('renders NFT information correctly', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    expect(screen.getByText('Ambient Dreams')).toBeInTheDocument();
    expect(screen.getByText('AI Composer')).toBeInTheDocument();
    expect(screen.getByText('10.5 FLOW')).toBeInTheDocument();
    expect(screen.getByText('Ambient')).toBeInTheDocument();
  });

  it('displays NFT image with correct alt text', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const image = screen.getByAltText('Ambient Dreams');
    expect(image).toBeInTheDocument();
    expect(image).toHaveAttribute('src', mockNFT.image);
  });

  it('shows play button for audio preview', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const playButton = screen.getByTestId('preview-play-button');
    expect(playButton).toBeInTheDocument();
    expect(playButton).toHaveAttribute('aria-label', 'Preview audio');
  });

  it('calls onPlay callback when play button is clicked', () => {
    const onPlay = vi.fn();
    renderWithRouter(<NFTCard nft={mockNFT} onPlay={onPlay} />);
    
    const playButton = screen.getByTestId('preview-play-button');
    fireEvent.click(playButton);
    
    expect(onPlay).toHaveBeenCalledWith(mockNFT);
  });

  it('shows buy button when NFT is for sale', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const buyButton = screen.getByTestId('buy-button');
    expect(buyButton).toBeInTheDocument();
    expect(buyButton).toHaveTextContent('Buy Now');
  });

  it('hides buy button when NFT is not for sale', () => {
    const notForSaleNFT = { ...mockNFT, isForSale: false };
    renderWithRouter(<NFTCard nft={notForSaleNFT} />);
    
    expect(screen.queryByTestId('buy-button')).not.toBeInTheDocument();
    expect(screen.getByText('Not for sale')).toBeInTheDocument();
  });

  it('calls onBuy callback when buy button is clicked', () => {
    const onBuy = vi.fn();
    renderWithRouter(<NFTCard nft={mockNFT} onBuy={onBuy} />);
    
    const buyButton = screen.getByTestId('buy-button');
    fireEvent.click(buyButton);
    
    expect(onBuy).toHaveBeenCalledWith(mockNFT);
  });

  it('navigates to NFT detail page when card is clicked', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const cardLink = screen.getByTestId('nft-card-link');
    expect(cardLink).toHaveAttribute('href', `/nft/${mockNFT.id}`);
  });

  it('displays duration in correct format', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    expect(screen.getByText('3:00')).toBeInTheDocument();
  });

  it('shows favorite button', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const favoriteButton = screen.getByTestId('favorite-button');
    expect(favoriteButton).toBeInTheDocument();
  });

  it('toggles favorite state when favorite button is clicked', () => {
    const onFavorite = vi.fn();
    renderWithRouter(<NFTCard nft={mockNFT} onFavorite={onFavorite} />);
    
    const favoriteButton = screen.getByTestId('favorite-button');
    fireEvent.click(favoriteButton);
    
    expect(onFavorite).toHaveBeenCalledWith(mockNFT.id);
  });

  it('shows loading state when specified', () => {
    renderWithRouter(<NFTCard nft={mockNFT} loading={true} />);
    
    expect(screen.getByTestId('nft-card-skeleton')).toBeInTheDocument();
  });

  it('displays owner information', () => {
    renderWithRouter(<NFTCard nft={mockNFT} showOwner={true} />);
    
    expect(screen.getByText(/Owner:/)).toBeInTheDocument();
  });

  it('handles missing image gracefully', () => {
    const nftWithoutImage = { ...mockNFT, image: null };
    renderWithRouter(<NFTCard nft={nftWithoutImage} />);
    
    const placeholder = screen.getByTestId('image-placeholder');
    expect(placeholder).toBeInTheDocument();
  });

  it('shows creation date when specified', () => {
    renderWithRouter(<NFTCard nft={mockNFT} showDate={true} />);
    
    expect(screen.getByText(/Created/)).toBeInTheDocument();
  });

  it('applies hover effects correctly', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const nftCardLink = screen.getByTestId('nft-card-link');
    expect(nftCardLink).toHaveClass('hover:shadow-lg');
  });

  it('handles keyboard navigation', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const card = screen.getByTestId('nft-card');
    fireEvent.keyDown(card, { key: 'Enter' });
    
    // Should navigate to detail page
    expect(card.closest('a')).toHaveAttribute('href', `/nft/${mockNFT.id}`);
  });

  it('shows genre badge with correct styling', () => {
    renderWithRouter(<NFTCard nft={mockNFT} />);
    
    const genreBadge = screen.getByTestId('genre-badge');
    expect(genreBadge).toBeInTheDocument();
    expect(genreBadge).toHaveTextContent('Ambient');
  });

  it('handles long titles with ellipsis', () => {
    const longTitleNFT = {
      ...mockNFT,
      title: 'This is a very long title that should be truncated with ellipsis'
    };
    renderWithRouter(<NFTCard nft={longTitleNFT} />);
    
    const titleElement = screen.getByTestId('nft-title');
    expect(titleElement).toHaveClass('truncate');
  });
});